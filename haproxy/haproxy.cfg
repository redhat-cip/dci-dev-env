global
  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  log stdout format raw local0 info

defaults
  mode http
  option forwardfor
  default-server init-addr last,none resolvers default
  log global

  # Retries
  retries 5
  retry-on all-retryable-errors
  # If a backend fails, try the next one.
  # Add an integer to retry the first backend N times.
  option redispatch
  # Timeouts
  timeout connect 3s
  timeout server 30s
  timeout client 10s
  timeout http-request 10s


resolvers default
  # Might be required depending on deployment method
  # Must point to the nameserver for containers
  # nameserver dns1 127.0.0.11:53
  parse-resolv-conf
  resolve_retries 5
  timeout resolve 1s
  timeout retry   1s
  hold other      1s
  hold refused    1s
  hold nx         1s
  hold timeout    1s
  hold valid      1s
  hold obsolete   1s

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend http-in
  bind *:80
  option httpslog

  # Default route: ui
  default_backend ui
  # If URL starts with '/api/': dci-control-server
  use_backend api if { path_dir -i /api/ }
  # Another example: route to minio if 'host' header starts with "minio"
  use_backend minio if { req.hdr(host) -i minio }

backend api
  # conf is ready for up to 10 backends
  server s01 dci-dev-env_api_1:5000 check
  server s02 dci-dev-env_api_2:5000 check
  server s03 dci-dev-env_api_3:5000 check
  server s04 dci-dev-env_api_4:5000 check
  server s05 dci-dev-env_api_5:5000 check
  server s06 dci-dev-env_api_6:5000 check
  server s07 dci-dev-env_api_7:5000 check
  server s08 dci-dev-env_api_8:5000 check
  server s09 dci-dev-env_api_9:5000 check
  server s10 dci-dev-env_api_10:5000 check

  # Healthcheck on endpoint-specific endpoint & method
  option httpchk HEAD /api/v1/

backend ui
  server u1 ui:80 check

backend minio
  server m1 minio:9000 check
